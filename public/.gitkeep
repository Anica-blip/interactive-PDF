<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive PDF Creator</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #2f3136;
            color: #ffffff;
            height: 100vh;
            overflow: hidden;
        }

        .container {
            display: flex;
            height: 100vh;
        }

        .sidebar {
            width: 300px;
            background: #36393f;
            padding: 20px;
            overflow-y: auto;
            border-right: 1px solid #40444b;
        }

        .pdf-viewer {
            flex: 1;
            background: #ffffff;
            position: relative;
            overflow: auto;
        }

        .controls {
            background: #202225;
            padding: 15px;
            border-bottom: 1px solid #40444b;
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .btn {
            background: #5865f2;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: background 0.2s;
        }

        .btn:hover {
            background: #4752c4;
        }

        .btn.secondary {
            background: #4f545c;
        }

        .btn.secondary:hover {
            background: #5d6269;
        }

        input[type="file"] {
            display: none;
        }

        .file-label {
            background: #43b581;
            color: white;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            display: inline-block;
            transition: background 0.2s;
        }

        .file-label:hover {
            background: #3ca374;
        }

        #pdfCanvas {
            display: block;
            margin: 20px auto;
            border: 1px solid #ddd;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            cursor: crosshair;
        }

        .tool-section {
            margin-bottom: 25px;
            padding: 15px;
            background: #40444b;
            border-radius: 6px;
        }

        .tool-section h3 {
            margin-bottom: 12px;
            color: #ffffff;
            font-size: 16px;
        }

        .form-group {
            margin-bottom: 12px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-size: 13px;
            color: #b3b3b3;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 8px;
            border: 1px solid #72767d;
            border-radius: 4px;
            background: #2f3136;
            color: #ffffff;
            font-size: 13px;
        }

        .coordinates {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 8px;
        }

        .preview-list {
            max-height: 200px;
            overflow-y: auto;
            background: #2f3136;
            border-radius: 4px;
            padding: 10px;
        }

        .preview-item {
            background: #36393f;
            padding: 8px;
            margin-bottom: 8px;
            border-radius: 4px;
            font-size: 12px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .preview-item .delete-btn {
            background: #ed4245;
            color: white;
            border: none;
            padding: 4px 8px;
            border-radius: 3px;
            cursor: pointer;
            font-size: 11px;
        }

        .status {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: #5865f2;
            color: white;
            padding: 12px 20px;
            border-radius: 6px;
            display: none;
            z-index: 1000;
        }

        .page-info {
            background: #202225;
            padding: 10px;
            text-align: center;
            border-bottom: 1px solid #40444b;
        }

        .zoom-controls {
            display: flex;
            gap: 5px;
            align-items: center;
        }

        .zoom-controls button {
            padding: 4px 8px;
            font-size: 12px;
        }

        .element-overlay {
            position: absolute;
            border: 2px dashed #5865f2;
            background: rgba(88, 101, 242, 0.1);
            pointer-events: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="sidebar">
            <h2 style="margin-bottom: 20px; color: #ffffff;">Interactive PDF Creator</h2>
            
            <!-- Load Canva PDF -->
            <div class="tool-section">
                <h3>üìÅ Load Canva PDF</h3>
                <label for="pdfUpload" class="file-label">Choose Canva PDF</label>
                <input type="file" id="pdfUpload" accept=".pdf">
                <div id="pdfInfo" style="margin-top: 10px; font-size: 12px; color: #b3b3b3;"></div>
            </div>

            <!-- Add Video -->
            <div class="tool-section">
                <h3>üé¨ Add Video</h3>
                <div class="form-group">
                    <label>Video File:</label>
                    <input type="file" id="videoFile" accept="video/*">
                </div>
                <div class="coordinates">
                    <div class="form-group">
                        <label>X Position:</label>
                        <input type="number" id="videoX" placeholder="150">
                    </div>
                    <div class="form-group">
                        <label>Y Position:</label>
                        <input type="number" id="videoY" placeholder="400">
                    </div>
                </div>
                <div class="coordinates">
                    <div class="form-group">
                        <label>Width:</label>
                        <input type="number" id="videoWidth" placeholder="300">
                    </div>
                    <div class="form-group">
                        <label>Height:</label>
                        <input type="number" id="videoHeight" placeholder="200">
                    </div>
                </div>
                <button class="btn" onclick="addVideoElement()">Add Video</button>
            </div>

            <!-- Add Audio -->
            <div class="tool-section">
                <h3>üéµ Add Audio</h3>
                <div class="form-group">
                    <label>Audio File:</label>
                    <input type="file" id="audioFile" accept="audio/*">
                </div>
                <div class="form-group">
                    <label>Button Text:</label>
                    <input type="text" id="audioText" placeholder="üéµ Play Audio" value="üéµ Play Audio">
                </div>
                <div class="coordinates">
                    <div class="form-group">
                        <label>X Position:</label>
                        <input type="number" id="audioX" placeholder="50">
                    </div>
                    <div class="form-group">
                        <label>Y Position:</label>
                        <input type="number" id="audioY" placeholder="50">
                    </div>
                </div>
                <button class="btn" onclick="addAudioElement()">Add Audio Button</button>
            </div>

            <!-- Add Text Field -->
            <div class="tool-section">
                <h3>üìù Add Text Field</h3>
                <div class="form-group">
                    <label>Field Name:</label>
                    <input type="text" id="fieldName" placeholder="userName">
                </div>
                <div class="form-group">
                    <label>Placeholder:</label>
                    <input type="text" id="fieldPlaceholder" placeholder="Enter your name">
                </div>
                <div class="coordinates">
                    <div class="form-group">
                        <label>X Position:</label>
                        <input type="number" id="fieldX" placeholder="100">
                    </div>
                    <div class="form-group">
                        <label>Y Position:</label>
                        <input type="number" id="fieldY" placeholder="300">
                    </div>
                </div>
                <button class="btn" onclick="addTextFieldElement()">Add Text Field</button>
            </div>

            <!-- Interactive Elements Preview -->
            <div class="tool-section">
                <h3>üìã Interactive Elements</h3>
                <div id="elementsList" class="preview-list">
                    <p style="color: #72767d; text-align: center; font-size: 12px;">No elements added yet</p>
                </div>
            </div>

            <!-- Save to Cloud -->
            <div class="tool-section">
                <h3>‚òÅÔ∏è Save to Wasabi</h3>
                <div class="form-group">
                    <label>PDF Name:</label>
                    <input type="text" id="pdfName" placeholder="my-interactive-pdf">
                </div>
                <button class="btn" onclick="savePdfToCloud()" style="width: 100%; background: #43b581;">Save to Cloud</button>
                <div id="saveResult" style="margin-top: 10px; font-size: 12px;"></div>
            </div>
        </div>

        <div class="pdf-viewer">
            <div class="controls">
                <div class="zoom-controls">
                    <button class="btn secondary" onclick="zoomOut()">-</button>
                    <span id="zoomLevel">100%</span>
                    <button class="btn secondary" onclick="zoomIn()">+</button>
                </div>
                <button class="btn secondary" onclick="prevPage()">‚óÄ Prev</button>
                <span id="pageInfo">Page 1 of 1</span>
                <button class="btn secondary" onclick="nextPage()">Next ‚ñ∂</button>
                <button class="btn" onclick="clearElements()">Clear Elements</button>
            </div>
            
            <div class="page-info">
                <div>Click on the PDF to position interactive elements</div>
            </div>
            
            <div id="pdfContainer" style="position: relative;">
                <canvas id="pdfCanvas"></canvas>
            </div>
        </div>
    </div>

    <div id="status" class="status"></div>

    <script>
        // Global variables
        let pdfDoc = null;
        let pageNum = 1;
        let pageCount = 0;
        let scale = 1.0;
        let canvas = document.getElementById('pdfCanvas');
        let ctx = canvas.getContext('2d');
        let interactiveElements = [];
        let currentTool = null;

        // Configure PDF.js
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';

        // Load PDF from file
        document.getElementById('pdfUpload').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file && file.type === 'application/pdf') {
                const reader = new FileReader();
                reader.onload = function(e) {
                    loadPDF(e.target.result);
                };
                reader.readAsArrayBuffer(file);
                
                document.getElementById('pdfInfo').innerHTML = `
                    <strong>${file.name}</strong><br>
                    Size: ${(file.size / 1024 / 1024).toFixed(2)} MB
                `;
            }
        });

        async function loadPDF(data) {
            try {
                pdfDoc = await pdfjsLib.getDocument({data: data}).promise;
                pageCount = pdfDoc.numPages;
                pageNum = 1;
                renderPage(pageNum);
                updatePageInfo();
                showStatus('PDF loaded successfully!', 'success');
            } catch (error) {
                showStatus('Error loading PDF: ' + error.message, 'error');
            }
        }

        async function renderPage(num) {
            if (!pdfDoc) return;
            
            const page = await pdfDoc.getPage(num);
            const viewport = page.getViewport({scale: scale});
            
            canvas.height = viewport.height;
            canvas.width = viewport.width;
            
            const renderContext = {
                canvasContext: ctx,
                viewport: viewport
            };
            
            await page.render(renderContext).promise;
            renderInteractiveElements();
        }

        function renderInteractiveElements() {
            // Clear existing overlays
            const existingOverlays = document.querySelectorAll('.element-overlay');
            existingOverlays.forEach(overlay => overlay.remove());
            
            // Render current page elements
            const pageElements = interactiveElements.filter(el => el.page === pageNum);
            pageElements.forEach(element => {
                const overlay = document.createElement('div');
                overlay.className = 'element-overlay';
                overlay.style.left = (element.x * scale) + 'px';
                overlay.style.top = (element.y * scale) + 'px';
                overlay.style.width = ((element.width || 100) * scale) + 'px';
                overlay.style.height = ((element.height || 30) * scale) + 'px';
                
                // Add label
                const label = document.createElement('div');
                label.textContent = element.type + ': ' + (element.name || element.file?.name || 'Element');
                label.style.position = 'absolute';
                label.style.top = '-20px';
                label.style.left = '0';
                label.style.fontSize = '10px';
                label.style.background = '#5865f2';
                label.style.color = 'white';
                label.style.padding = '2px 6px';
                label.style.borderRadius = '3px';
                label.style.whiteSpace = 'nowrap';
                overlay.appendChild(label);
                
                document.getElementById('pdfContainer').appendChild(overlay);
            });
        }

        // Canvas click handler for positioning
        canvas.addEventListener('click', function(e) {
            const rect = canvas.getBoundingClientRect();
            const x = Math.round((e.clientX - rect.left) / scale);
            const y = Math.round((e.clientY - rect.top) / scale);
            
            // Auto-fill coordinates in the active tool
            const activeSection = document.querySelector('.tool-section:hover');
            if (activeSection) {
                const xInput = activeSection.querySelector('input[id*="X"]');
                const yInput = activeSection.querySelector('input[id*="Y"]');
                if (xInput && yInput) {
                    xInput.value = x;
                    yInput.value = y;
                    showStatus(`Position set: (${x}, ${y})`, 'info');
                }
            }
        });

        // Zoom functions
        function zoomIn() {
            scale = Math.min(scale + 0.25, 3.0);
            renderPage(pageNum);
            document.getElementById('zoomLevel').textContent = Math.round(scale * 100) + '%';
        }

        function zoomOut() {
            scale = Math.max(scale - 0.25, 0.5);
            renderPage(pageNum);
            document.getElementById('zoomLevel').textContent = Math.round(scale * 100) + '%';
        }

        // Page navigation
        function prevPage() {
            if (pageNum <= 1) return;
            pageNum--;
            renderPage(pageNum);
            updatePageInfo();
        }

        function nextPage() {
            if (pageNum >= pageCount) return;
            pageNum++;
            renderPage(pageNum);
            updatePageInfo();
        }

        function updatePageInfo() {
            document.getElementById('pageInfo').textContent = `Page ${pageNum} of ${pageCount}`;
        }

        // Add interactive elements
        function addVideoElement() {
            const file = document.getElementById('videoFile').files[0];
            const x = parseInt(document.getElementById('videoX').value) || 150;
            const y = parseInt(document.getElementById('videoY').value) || 400;
            const width = parseInt(document.getElementById('videoWidth').value) || 300;
            const height = parseInt(document.getElementById('videoHeight').value) || 200;
            
            if (!file) {
                showStatus('Please select a video file', 'error');
                return;
            }

            const element = {
                id: Date.now(),
                type: 'video',
                file: file,
                x: x,
                y: y,
                width: width,
                height: height,
                page: pageNum
            };

            interactiveElements.push(element);
            updateElementsList();
            renderInteractiveElements();
            showStatus('Video element added!', 'success');
        }

        function addAudioElement() {
            const file = document.getElementById('audioFile').files[0];
            const text = document.getElementById('audioText').value || 'üéµ Play Audio';
            const x = parseInt(document.getElementById('audioX').value) || 50;
            const y = parseInt(document.getElementById('audioY').value) || 50;
            
            if (!file) {
                showStatus('Please select an audio file', 'error');
                return;
            }

            const element = {
                id: Date.now(),
                type: 'audio',
                file: file,
                text: text,
                x: x,
                y: y,
                width: 120,
                height: 30,
                page: pageNum
            };

            interactiveElements.push(element);
            updateElementsList();
            renderInteractiveElements();
            showStatus('Audio button added!', 'success');
        }

        function addTextFieldElement() {
            const name = document.getElementById('fieldName').value;
            const placeholder = document.getElementById('fieldPlaceholder').value;
            const x = parseInt(document.getElementById('fieldX').value) || 100;
            const y = parseInt(document.getElementById('fieldY').value) || 300;
            
            if (!name) {
                showStatus('Please enter a field name', 'error');
                return;
            }

            const element = {
                id: Date.now(),
                type: 'textField',
                name: name,
                placeholder: placeholder,
                x: x,
                y: y,
                width: 200,
                height: 25,
                page: pageNum
            };

            interactiveElements.push(element);
            updateElementsList();
            renderInteractiveElements();
            showStatus('Text field added!', 'success');
        }

        function updateElementsList() {
            const list = document.getElementById('elementsList');
            if (interactiveElements.length === 0) {
                list.innerHTML = '<p style="color: #72767d; text-align: center; font-size: 12px;">No elements added yet</p>';
                return;
            }

            list.innerHTML = interactiveElements.map(element => `
                <div class="preview-item">
                    <div>
                        <strong>${element.type}</strong><br>
                        Page ${element.page} ‚Ä¢ (${element.x}, ${element.y})
                        ${element.name ? `<br>${element.name}` : ''}
                        ${element.file ? `<br>${element.file.name}` : ''}
                    </div>
                    <button class="delete-btn" onclick="deleteElement(${element.id})">√ó</button>
                </div>
            `).join('');
        }

        function deleteElement(id) {
            interactiveElements = interactiveElements.filter(el => el.id !== id);
            updateElementsList();
            renderInteractiveElements();
            showStatus('Element deleted', 'info');
        }

        function clearElements() {
            interactiveElements = [];
            updateElementsList();
            renderInteractiveElements();
            showStatus('All elements cleared', 'info');
        }

        async function savePdfToCloud() {
            const pdfName = document.getElementById('pdfName').value || 'interactive-pdf';
            
            if (!pdfDoc) {
                showStatus('Please load a PDF first', 'error');
                return;
            }

            if (interactiveElements.length === 0) {
                showStatus('Add some interactive elements first', 'error');
                return;
            }

            showStatus('Generating and uploading PDF...', 'info');
            
            try {
                // This would call your backend API
                const formData = new FormData();
                formData.append('pdfName', pdfName);
                formData.append('elements', JSON.stringify(interactiveElements));
                
                // Add files
                interactiveElements.forEach((element, index) => {
                    if (element.file) {
                        formData.append(`file_${index}`, element.file);
                    }
                });

                // Get original PDF data
                const pdfData = await pdfDoc.getData();
                const pdfBlob = new Blob([pdfData], { type: 'application/pdf' });
                formData.append('originalPdf', pdfBlob);

                // Call backend API (you need to implement this)
                const response = await fetch('/api/generate-pdf', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                
                if (result.success) {
                    document.getElementById('saveResult').innerHTML = `
                        <strong style="color: #43b581;">‚úÖ Saved Successfully!</strong><br>
                        <strong>Unique URL:</strong><br>
                        <a href="${result.viewUrl}" target="_blank" style="color: #00b4d8; word-break: break-all;">
                            ${result.viewUrl}
                        </a><br>
                        <small style="color: #b3b3b3;">Click to open in browser</small>
                    `;
                    showStatus('PDF saved to cloud!', 'success');
                } else {
                    throw new Error(result.message || 'Unknown error');
                }
                
            } catch (error) {
                showStatus('Error saving PDF: ' + error.message, 'error');
                document.getElementById('saveResult').innerHTML = `
                    <span style="color: #ed4245;">‚ùå Save failed: ${error.message}</span>
                `;
            }
        }

        function showStatus(message, type = 'info') {
            const status = document.getElementById('status');
            status.textContent = message;
            status.style.display = 'block';
            
            // Color based on type
            switch (type) {
                case 'success':
                    status.style.background = '#43b581';
                    break;
                case 'error':
                    status.style.background = '#ed4245';
                    break;
                case 'info':
                default:
                    status.style.background = '#5865f2';
            }
            
            setTimeout(() => {
                status.style.display = 'none';
            }, 3000);
        }
    </script>
</body>
</html>
